#!/usr/bin/env python

# Copyright (C) 2011-2012 CRS4.
#
# This file is part of Seal.
#
# Seal is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option)
# any later version.
#
# Seal is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
# or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
# for more details.
#
# You should have received a copy of the GNU General Public License along
# with Seal.  If not, see <http://www.gnu.org/licenses/>.

#########################################################
# You need a working Hadoop cluster to use this.
#########################################################


import fileinput
import glob
import os
import site
import subprocess
import sys

import pydoop.hdfs

IntegrationTestDir = os.path.realpath(os.path.join(os.path.dirname(__file__), "..", ".."))
site.addsitedir(IntegrationTestDir)

from seal_integration_test import SealIntegrationTest, SealTestException, OutputValidator, DiffOutputValidator
import tseal.test_utils as tseal_utils

class SamOutputValidator(OutputValidator):
    def validate_output(self, expected_data_file, output_dir_path):
        self._logger.debug("data downloaded to %s", output_dir_path)
        test_output_files = glob.glob('%s/part-*' % output_dir_path)
        self._logger.debug("Globbing these output files: %s", test_output_files)
        lines = [
            line.rstrip('\n')
            for line in fileinput.input(test_output_files) ]
        # sort the tags
        def sort_tags(sam_record):
            fields = sam_record.split('\t')
            new_row = fields[0:11] + sorted(fields[11:])
            return '\t'.join(new_row)

        sorted_lines = sorted( [ sort_tags(record) for record in lines ] )
        self._logger.debug("sorted %d records", len(sorted_lines))

        sorted_output_file = "%s/sorted_sam_output" % self._work_dir
        with open(sorted_output_file, 'w') as f:
            for line in sorted_lines:
                f.write(line)
                f.write('\n')
        self._logger.debug("sorted alignment data and wrote it to %s", sorted_output_file)

        cmd = ["diff", expected_data_file, sorted_output_file]
        self._logger.info(cmd)
        try:
            subprocess.check_call(cmd, stderr=subprocess.STDOUT)
        except subprocess.CalledProcessError as e:
            self._logger.debug("Found differences.  diff returned non-zero")
            self._logger.debug("output:\n%s", e.output)
            self._logger.debug("raising a SealTestException")
            # diff returns non-zero when the inputs differ
            raise SealTestException("Output from test is not as expected\n%s" % e.output)



class SeqalMiniRefBwaMemParquetOutput(SealIntegrationTest):
    def __init__(self):
        SealIntegrationTest.__init__(self, os.path.realpath(os.path.dirname(__file__)) )
        self.output_validator_class = SamOutputValidator

    def run_program(self, hdfs_input, hdfs_output):
        # run seqal with BDG output, then bdg2sam to convert to SAM
        ref_archive = os.path.join(tseal_utils.MiniRefMemDir, 'mini_ref_bwamem_0.7.8.tar')
        hdfs_dir = self.make_hdfs_test_path()
        remote_ref = pydoop.hdfs.path.join(hdfs_dir, os.path.basename(ref_archive))
        self.log("uploading reference to HDFS path %s", remote_ref)
        pydoop.hdfs.put(
                os.path.join(self.get_test_dir(), ref_archive),
                remote_ref)
        intermediate_dir = os.path.join(hdfs_dir, 'tmp')
        self.log("Running alignment")
        cmd = ["%s/scripts/seal" % self.seal_dir, "seqal",
                "--align-only",
                "--output-format", "bdg",
                "--ref-archive", remote_ref
                ]
        if self.options.debug:
            cmd.extend(('-D', 'seal.seqal.log.level=DEBUG') )

        cmd.extend( (hdfs_input, intermediate_dir))
        self.logger.debug("Command: %s", " ".join(cmd))

        self.run_cmd_and_output_if_failure(cmd)

        self.logger.info("Converting seqal to SAM")
        cmd = ["%s/scripts/seal" % self.seal_dir, "bdg2sam",
                intermediate_dir, hdfs_output
                ]
        self.logger.debug("Command: %s", " ".join(cmd))
        self.run_cmd_and_output_if_failure(cmd)

if __name__ == '__main__':
    success = SeqalMiniRefBwaMemParquetOutput().test_method()
    sys.exit( 0 if success else 1 )
